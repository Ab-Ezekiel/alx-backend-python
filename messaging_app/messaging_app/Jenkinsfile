// messaging_app/Jenkinsfile
pipeline {
  agent any

  environment {
    GIT_CREDENTIALS = 'github-creds' // credential ID you created in Jenkins
  }

  stages {
    stage('Checkout') {
      steps {
        script {
          // Replace <USERNAME> with your GitHub username or org, and ensure branch is correct (main/master)
          def repoUrl = 'https://github.com/<USERNAME>/alx-backend-python.git'
          checkout([$class: 'GitSCM',
            branches: [[name: '*/main']],
            doGenerateSubmoduleConfigurations: false,
            extensions: [],
            userRemoteConfigs: [[url: repoUrl, credentialsId: env.GIT_CREDENTIALS]]
          ])
        }
      }
    }

    stage('Install deps & Run tests') {
      steps {
        script {
          // Uses Python docker image; requires Docker socket mounted into Jenkins container
          docker.image('python:3.10-slim').inside('--user root:root') {
            sh '''
              set -exo pipefail
              python -V
              pip install --upgrade pip
              if [ -f requirements.txt ]; then pip install -r requirements.txt || true; fi
              pip install pytest pytest-cov
              # Run tests and generate junit xml for Jenkins
              pytest --maxfail=1 --disable-warnings --junitxml=report.xml
            '''
          }
        }
      }
      post {
        always {
          // publish junit results and archive report
          junit allowEmptyResults: true, testResults: 'report.xml'
          archiveArtifacts artifacts: 'report.xml', allowEmptyArchive: true
        }
      }
    }

    stage('Finish') {
      steps {
        echo "Pipeline finished. Check test results and archived report."
      }
    }
  }

  post {
    success {
      echo "Build succeeded"
    }
    failure {
      echo "Build failed â€” open console output to see errors"
    }
  }
}
